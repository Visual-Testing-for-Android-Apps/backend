AWSTemplateFormatVersion: 2010-09-09
Description: >-
  android-visual-testing

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Api:
    Cors:
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowMethods: "'OPTIONS,POST,GET,DELETE'"
      AllowCredentials: false
      AllowOrigin: "'*'"
    BinaryMediaTypes:
      - video/mp4
      - image/png
      - image/jpeg

Parameters:
  deployOwlEye:
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  deploySeenomaly:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

Conditions:
  ifDeployOwlEye: !Equals
    - !Ref deployOwlEye
    - true
  ifDeploySeenomaly: !Equals
    - !Ref deploySeenomaly
    - true

  # Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function - uploaderHandler
  UploadHandler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: uploadHandler/
      Handler: dist/index.handler # TODO
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Endpoint for uploading image and videos
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Action: dynamodb:*
              Effect: Allow
              Resource:
                - !GetAtt JobTable.Arn
            - Action: cloudwatch:PutMetricData
              Effect: Allow
              Resource: "*"
            - Action:
                - sqs:*
              Effect: Allow
              Resource: "*"
            - Action: s3:*
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${SrcBucket}/*
                - !Sub arn:aws:s3:::${SrcBucket}
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          JOB_TABLE: !Ref JobTable
          SRC_BUCKET: !Ref SrcBucket
          SEENORMALY_URL: !Ref SeenomalyQueue
          OWLEUE_URL: !Ref OwlEyeQueue
      Events:
        Api:
          Type: Api
          Properties:
            Path: /job
            Method: POST

  PostProcessHandler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: postProcessHandler/
      Handler: dist/index.handler # TODO
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Endpoint for post processing results
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable
        - S3CrudPolicy:
            BucketName: !Ref SrcBucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          JOB_TABLE: !Ref JobTable
          SRC_BUCKET: !Ref SrcBucket
          FILE_ZIP_QUEUE: !Ref FileZipQueue
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PostProcessHandlerQueue.Arn
            BatchSize: 1

  SeenomalyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Condition: ifDeploySeenomaly
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 5000
      Events:
        Api:
          Type: Api #
          Properties:
            Path: /Seenomaly
            Method: post
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SeenomalyQueue.Arn
            BatchSize: 1
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable
        - S3CrudPolicy:
            BucketName: !Ref SrcBucket
      Environment:
        Variables:
          SRC_BUCKET: !Ref SrcBucket
          JOB_TABLE: !Ref JobTable
          POST_PROCESS_HANDLER_QUEUE: !Ref PostProcessHandlerQueue
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./seenomaly
      DockerTag: python3.7-v1
      
  OwlEyeFunction:
      Type: AWS::Serverless::Function 
      Properties:
        PackageType: Image
        Timeout: 300
        MemorySize: 1000
        Events:
          Api:
            Type: Api 
            Properties:
              Path: /owleye
              Method: post
          SQSQueueEvent:
            Type: SQS
            Properties:
              Queue: !GetAtt OwlEyeQueue.Arn
              BatchSize: 1
        Policies:
          - DynamoDBCrudPolicy:
              TableName: !Ref JobTable
          - S3CrudPolicy:
              BucketName: !Ref SrcBucket
        Environment:
          Variables:
            SRC_BUCKET: !Ref SrcBucket
            JOB_TABLE: !Ref JobTable
            POST_PROCESS_HANDLER_QUEUE: !Ref PostProcessHandlerQueue   
      Metadata:
        Dockerfile: Dockerfile
        DockerContext: ./owlEye
        DockerTag: python3.7-v1

  FileCompress:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fileCompress/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 10
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable
        - S3CrudPolicy:
            BucketName: !Ref SrcBucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          JOB_TABLE: !Ref JobTable
          SRC_BUCKET: !Ref SrcBucket
      Events:
        FileCompress:
          Type: Api
          Properties:
            Path: /fileCompress
            Method: get

  ReportGenerator:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: reportGenerator/
      Handler: dist/reportGen.generateReport
      Runtime: nodejs12.x
      Timeout: 100
      Description: Endpoint for generating HTML report
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable
        - S3CrudPolicy:
            BucketName: !Ref SrcBucket
      Environment:
        Variables:
          # Make names accessible as environment variable from function code during execution
          JOB_TABLE: !Ref JobTable
          SRC_BUCKET: !Ref SrcBucket
          FILE_ZIP_QUEUE: !Ref FileZipQueue
      Events:
        # Specifies the event that trigger this function.
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PostProcessHandlerQueue.Arn
            BatchSize: 1

  # This is an SQS queue with all default configuration properties. To learn more about the available options, see
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
  # Queue that triggers report generation
  PostProcessHandlerQueue:
    Properties:
      ReceiveMessageWaitTimeSeconds: 5
      VisibilityTimeout: 1000
    Type: AWS::SQS::Queue

  SeenomalyQueue:
    Properties:
      ReceiveMessageWaitTimeSeconds: 5
      VisibilityTimeout: 1000
    Type: AWS::SQS::Queue

  OwlEyeQueue:
    Properties:
      ReceiveMessageWaitTimeSeconds: 5
      VisibilityTimeout: 1000
    Type: AWS::SQS::Queue

  # Queue to zip job files once report has been generated
  FileZipQueue:
    Properties:
      ReceiveMessageWaitTimeSeconds: 5
      VisibilityTimeout: 1000
    Type: AWS::SQS::Queue

  # DynamoDB table to store job information
  JobTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # S3 bucket
  SrcBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
          AllowedOrigins:
            - "*"

Outputs:
  UploadHandlerEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  UploadHandlerFunction:
    Value: !Ref UploadHandler
  PostProcessHandlerFuntion:
    Value: !Ref PostProcessHandler
  FileCompressApi:
    Description: "API Gateway endpoint URL for Prod stage for file compression function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/fileCompress/"
  ReportGeneratorFunction:
    Value: !Ref ReportGenerator
    # Description: "API Gateway endpoint URL for Prod stage for HTML report generation function"
    # Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/reportGenerator/"
  SrcBucket:
    Value: !Ref SrcBucket
  JobTableName:
    Value: !Ref JobTable
  # PostProcessHandlerQueue:
  #   Value
