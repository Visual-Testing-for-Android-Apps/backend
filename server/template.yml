AWSTemplateFormatVersion: 2010-09-09
Description: >-
  android-visual-testing

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Api:
    Cors:
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowMethods: "'OPTIONS,POST,GET,DELETE'"
      AllowCredentials: false
      AllowOrigin: "'*'"

Parameters:
  isProd:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  noComm:
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  emailPassword:
    Type: String

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function - uploaderHandler
  UploadHandler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: uploadHandler/
      Handler: dist/index.handler # TODO
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Endpoint for uploading image and videos
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Action: dynamodb:*
              Effect: Allow
              Resource:
                - !GetAtt JobTable.Arn
            - Action: cloudwatch:PutMetricData
              Effect: Allow
              Resource: "*"
            - Action:
                - sqs:*
              Effect: Allow
              Resource: "*"
            - Action: s3:*
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${SrcBucket}/*
                - !Sub arn:aws:s3:::${SrcBucket}
            - Action: ses:SendEmail
              Effect: Allow
              Resource: "*"
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          JOB_TABLE: !Ref JobTable
          SRC_BUCKET: !Ref SrcBucket
          SES_FROM_ADDRESS: vision.report.response@gmail.com
          IS_PROD: !Ref isProd
          NO_COMM: !Ref noComm
          JOB_HANDLER_QUEUE: !Ref JobHandlerQueue
      Events:
        Api:
          Type: Api
          Properties:
            Path: /job/{proxy+}
            Method: POST

  JobHandler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: jobHandler/
      Handler: dist/index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 800 # give 800 sec to jobHandler
      Description: Endpoint for post processing results
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Action: dynamodb:*
              Effect: Allow
              Resource:
                - !GetAtt JobTable.Arn
            - Action: cloudwatch:PutMetricData
              Effect: Allow
              Resource: "*"
            - Action:
                - sqs:*
              Effect: Allow
              Resource: "*"
            - Action: s3:*
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${SrcBucket}/*
                - !Sub arn:aws:s3:::${SrcBucket}
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          JOB_TABLE: !Ref JobTable
          SRC_BUCKET: !Ref SrcBucket
          REPORT_GENERATION_QUEUE: !Ref ReportGenerationQueue
          JOB_HANDLER_QUEUE: !Ref JobHandlerQueue
          EMAIL: vision.report.response@gmail.com
          PASSWORD: !Ref emailPassword
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt JobHandlerQueue.Arn
            BatchSize: 1

  # FileCompress:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: fileCompress/
  #     Handler: app.lambda_handler
  #     Runtime: python3.8
  #     Timeout: 10
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - Version: 2012-10-17
  #         Statement:
  #           - Action: dynamodb:*
  #             Effect: Allow
  #             Resource:
  #               - !GetAtt JobTable.Arn
  #           - Action: cloudwatch:PutMetricData
  #             Effect: Allow
  #             Resource: "*"
  #           - Action:
  #               - sqs:*
  #             Effect: Allow
  #             Resource: "*"
  #           - Action: s3:*
  #             Effect: Allow
  #             Resource:
  #               - !Sub arn:aws:s3:::${SrcBucket}/*
  #               - !Sub arn:aws:s3:::${SrcBucket}
  #     Environment:
  #       Variables:
  #         # Make table name accessible as environment variable from function code during execution
  #         JOB_TABLE: !Ref JobTable
  #         SRC_BUCKET: !Ref SrcBucket
  #     Events:
  #       SQSQueueEvent:
  #         Type: SQS
  #         Properties:
  #           Queue: !GetAtt FileZipQueue.Arn
  #           BatchSize: 1

  PeriodicFileRemoval:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: periodicFileRemoval/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Action: dynamodb:*
              Effect: Allow
              Resource:
                - !GetAtt JobTable.Arn
            - Action: cloudwatch:PutMetricData
              Effect: Allow
              Resource: "*"
            - Action:
                - sqs:*
              Effect: Allow
              Resource: "*"
            - Action: s3:*
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${SrcBucket}/*
                - !Sub arn:aws:s3:::${SrcBucket}
      Environment:
        Variables:
          JOB_TABLE: !Ref JobTable
          SRC_BUCKET: !Ref SrcBucket
    #No Queue required as this is intended to be triggered manually

  ReportGenerator:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: reportGenerator/
      Handler: dist/reportGen.generateReport
      Runtime: nodejs12.x
      Timeout: 100
      Description: Endpoint for generating HTML report
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Action: dynamodb:*
              Effect: Allow
              Resource:
                - !GetAtt JobTable.Arn
            - Action: cloudwatch:PutMetricData
              Effect: Allow
              Resource: "*"
            - Action:
                - sqs:*
              Effect: Allow
              Resource: "*"
            - Action: s3:*
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${SrcBucket}/*
                - !Sub arn:aws:s3:::${SrcBucket}
      Environment:
        Variables:
          # Make names accessible as environment variable from function code during execution
          JOB_TABLE: !Ref JobTable
          SRC_BUCKET: !Ref SrcBucket
          HOST_EMAIL: smtp.gmail.com
          EMAIL: vision.report.response@gmail.com
          PASSWORD: !Ref emailPassword
      Events:
        # Specifies the event that trigger this function.
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ReportGenerationQueue.Arn
            BatchSize: 1

  JobData:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: jobData/
      Handler: jobData.getReportJson
      Runtime: python3.9
      Timeout: 10
      Description: Endpoint for uploading image and videos
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobTable
        - S3CrudPolicy:
            BucketName: !Ref SrcBucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          JOB_TABLE: !Ref JobTable
          MAPPING_TABLE: !Ref MappingTable
          SRC_BUCKET: !Ref SrcBucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /jobdata
            Method: POST

  # This is an SQS queue with all default configuration properties. To learn more about the available options, see
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
  JobHandlerQueue:
    Properties:
      ReceiveMessageWaitTimeSeconds: 1
      VisibilityTimeout: 1000
    Type: AWS::SQS::Queue

  FileZipQueue:
    Properties:
      ReceiveMessageWaitTimeSeconds: 1
      VisibilityTimeout: 10
    Type: AWS::SQS::Queue

  #This is to set up a destination, but we can just put things in the queues manually.
  # EventInvokeConfig:
  #   Type: AWS::Lambda::EventInvokeConfig
  #   Properties:
  #     FunctionName: !Ref JobHandler
  #     Qualifier: "$LATEST"
  #     DestinationConfig:
  #         OnSuccess:
  #             Destination: !GetAtt ReportGenerationQueue.Arn
  #         OnFailure:
  #             Destination: !GetAtt ReportGenerationQueue.Arn

  ReportGenerationQueue:
    Properties:
      ReceiveMessageWaitTimeSeconds: 1
      VisibilityTimeout: 1000
    Type: AWS::SQS::Queue

  # DynamoDB table to store job information
  JobTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # DynamoDB table to store the public/private job mappings
  MappingTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: publicId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # S3 bucket
  SrcBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
              - POST
            AllowedOrigins:
              - "*"

Outputs:
  # UploadHandlerEndpoint:
  #   Description: "API Gateway endpoint URL for Prod stage"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  UploadHandlerFunction:
    Value: !Ref UploadHandler
  JobHandlerFuntion:
    Value: !Ref JobHandler
  ReportGeneratorFunction:
    Value: !Ref ReportGenerator
  SrcBucket:
    Value: !Ref SrcBucket
  JobTableName:
    Value: !Ref JobTable
